"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY", "b)7wo#5cw5)=k81^cr)f=r++g4=ojmhp9ti@okj!ror#+dx("
)

# ---------------------------------------------------------------------------- #
#                                   DEBUGGING                                  #
# ---------------------------------------------------------------------------- #

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

# Logging
LOGGING_DIR = DATA_DIR / "logs"
LOGGING_DIR.mkdir(exist_ok=True)

container_id = os.getenv("HOSTNAME", "generic")

LOGGING_CONFIG = None  # Avoid Django logging setup
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {"format": "%(asctime)s - %(levelname)s - %(message)s"},
        "verbose": {
            "format": f"%(asctime)s - {container_id} - %(levelname)s - %(module)s - %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
        "file": {
            "level": "DEBUG",
            "class": "concurrent_log_handler.ConcurrentTimedRotatingFileHandler",
            "filename": LOGGING_DIR / "django.log",
            "when": "D",
            "interval": int(os.getenv("LOGGING_FILE_DAYS_INTERVAL", 1)),
            "backupCount": int(os.getenv("LOGGING_FILE_BACKUP_COUNT", 7)),
            "formatter": "verbose",
            "encoding": "utf-8",  # Explicitly set encoding to utf-8
        },
    },
    # "root": {"level": "WARNING", "handlers": ["console", "file"]},
    "loggers": {
        # Custom logger
        "myproject": {
            "level": os.getenv("MYPROJECT_LOG_LEVEL", "DEBUG"),
            "handlers": ["console", "file"],
            "propagate": False,
        },
        # Django logger
        "django": {
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        # Celery logger
        "celery": {
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        # Celery beat logger
        "celery.beat": {
            "level": "WARNING",
            "handlers": ["console", "file"],
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)

# ---------------------------------------------------------------------------- #
#                                  CONNECTIONS                                 #
# ---------------------------------------------------------------------------- #
# Hosts
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# CSRF
CSRF_TRUSTED_ORIGINS = os.getenv(
    "DJANGO_ALLOWED_ORIGINS", "http://localhost:4321,http://127.0.0.1:4321"
).split(",")
CSRF_COOKIE_NAME = os.getenv("DJANGO_CSRF_COOKIE_NAME", "csrftoken")
CSRF_COOKIE_DOMAIN = os.getenv("DJANGO_CSRF_COOKIE_DOMAIN", None)
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True

# CORS settings
CORS_ORIGIN_WHITELIST = os.getenv(
    "DJANGO_ALLOWED_ORIGINS", "http://localhost:4321,http://127.0.0.1:4321"
).split(",")

CORS_ALLOW_METHODS = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

CORS_ALLOW_CREDENTIALS = True

# Sessions
SESSION_COOKIE_DOMAIN = os.getenv("DJANGO_SESSION_COOKIE_DOMAIN", None)
SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = False


# ---------------------------------------------------------------------------- #
#                                INSTALLED APPS                                #
# ---------------------------------------------------------------------------- #
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    # ----------------------------------- CORS ----------------------------------- #
    "corsheaders",  # Django CORS Headers
    # ----------------------------------- REST ----------------------------------- #
    "rest_framework",  # Django REST Framework
    # ------------------------------ AUTHENTICATION ------------------------------ #
    "dj_rest_auth",  # Django REST Framework Authentication
    "dj_rest_auth.registration",  # Django REST Framework Registration
    "allauth",  # Django AllAuth
    "allauth.account",  # Django AllAuth Account
    "allauth.socialaccount",  # Django AllAuth Social Account
    "allauth.socialaccount.providers.google",  # Django AllAuth Google Provider
    "authentication",  # Custom authentication app
    # ---------------------------------- CELERY ---------------------------------- #
    "django_celery_beat",  # Celery beat
    # ----------------------------------- BREVO ---------------------------------- #
    "django_brevo",  # Brevo
    # ------------------------------- CONFIGURATION ------------------------------ #
    "solo",  # Django Solo
    # Custom apps
]

# ---------------------------------------------------------------------------- #
#                                  MIDDLEWARE                                  #
# ---------------------------------------------------------------------------- #
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Whitenoise
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Django CORS Headers
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Django AllAuth
]

# ---------------------------------------------------------------------------- #
#                              URLS AND TEMPLATES                              #
# ---------------------------------------------------------------------------- #
ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # `allauth` needs this from django
                "django.template.context_processors.request",
            ],
        },
    },
]


# ---------------------------------------------------------------------------- #
#                                     WSGI                                     #
# ---------------------------------------------------------------------------- #
WSGI_APPLICATION = "core.wsgi.application"


# ---------------------------------------------------------------------------- #
#                                   DATABASE                                   #
# ---------------------------------------------------------------------------- #

# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "django"),
        "USER": os.getenv("POSTGRES_USER", "django"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "django"),
        "HOST": os.getenv("POSTGRES_HOST", "postgres"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

# Redis
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")
REDIS_DB = os.getenv("REDIS_DB", "0")


# ---------------------------------------------------------------------------- #
#                             Internationalization                             #
# ---------------------------------------------------------------------------- #
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# ---------------------------------------------------------------------------- #
#                            STATIC AND MEDIA ROUTES                           #
# ---------------------------------------------------------------------------- #

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ---------------------------------------------------------------------------- #
#                                REST FRAMEWORK                                #
# ---------------------------------------------------------------------------- #

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        # "rest_framework.authentication.TokenAuthentication",
    ),
}


# ---------------------------------------------------------------------------- #
#                                AUTHENTICATION                                #
# ---------------------------------------------------------------------------- #

AUTH_USER_MODEL = "authentication.User"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

# ----------------------------- allauth settings ----------------------------- #
# https://docs.allauth.org/en/latest/index.html

ACCOUNT_AUTHENTICATION_METHOD = "email"  # username, email or username_email
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True  # Needs to be True to use email as the auth method
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # "none", "optional", "mandatory"
# ACCOUNT_EMAIL_NOTIFICATIONS = True  # This does not work yet with dj-rest-auth, it needs to be handled with signals
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_STORE_TOKENS = True  # Needed to access Google APIs
ACCOUNT_EMAIL_UNKNOWN_ACCOUNTS = (
    False  # Do not allow unknown accounts to reset password
)
# Override the default adapter to use a custom email module
ACCOUNT_ADAPTER = "authentication.adapter.CustomAccountAdapter"
# An email verification URL that the client will pick up.
CUSTOM_ACCOUNT_CONFIRM_EMAIL_URL = "/verifyemail/?key={0}"


# allauth providers
# https://docs.allauth.org/en/latest/socialaccount/provider_configuration.html
SOCIALACCOUNT_PROVIDERS = {}


# --------------------------- dj-rest-auth settings -------------------------- #
# See defaults in https://dj-rest-auth.readthedocs.io/en/latest/configuration.html
REST_AUTH = {
    "TOKEN_MODEL": None,  # Use sessions instead of tokens
    "SESSION_LOGIN": True,  # Use sessions instead of tokens
    # "LOGIN_SERIALIZER": "authentication.serializers.LoginSerializer",
    "REGISTER_SERIALIZER": "authentication.serializers.RegisterSerializer",
    "OLD_PASSWORD_FIELD_ENABLED": True,
}

SITE_ID = 1

# ---------------------------------------------------------------------------- #
#                                    CELERY                                    #
# ---------------------------------------------------------------------------- #
CELERY_BROKER_URL = os.getenv(
    "CELERY_BROKER_URL", f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
)
CELERY_RESULT_BACKEND = os.getenv(
    "CELERY_RESULT_BACKEND", f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
)
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# ---------------------------------------------------------------------------- #
#                                   SENDGRID                                   #
# ---------------------------------------------------------------------------- #
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY", "")

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST = "smtp.sendgrid.net"
EMAIL_HOST_USER = "apikey"  # this is exactly the value 'apikey'
DEFAULT_FROM_EMAIL = "no-reply@fisy.es"  # this is the verified email address
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
EMAIL_PORT = 587
EMAIL_USE_TLS = True
